<?php
/**
 * Copyright (c) 2017 Timo Ebel
 *
 * This work is licensed under the terms of the MIT license.
 * For a copy, see <https://opensource.org/licenses/MIT> or the LICENSE file included in this project.
 */

namespace Rekhyt\PhpDependencyChecker\Vulnerability\Factory;

use GuzzleHttp\Client;
use Rekhyt\PhpDependencyChecker\Vulnerability\Filter\VulnerabilityListFilterPackageExceptionList;
use Rekhyt\PhpDependencyChecker\Vulnerability\Repository\SLApi\Vulnerability;
use Rekhyt\PhpDependencyChecker\Vulnerability\Repository\SLApi\VulnerabilityFiltered;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\ApiEndpoint;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\PackageName;

class VulnerabilitySLApiRepository implements VulnerabilityProvider
{
    const DEFAULT_SL_API = 'https://security.sensiolabs.org/check_lock';

    /** @inheritdoc */
    public function buildSLApiProvider(array $excludePackages = [], $slApiEndpoint = '')
    {
        $slApiEndpoint = empty($slApiEndpoint)
            ? self::DEFAULT_SL_API
            : $slApiEndpoint;

        $excludePackages = array_map(
            function ($value) {
                return new PackageName(trim($value));
            },
            $excludePackages
        );

        $repository = new Vulnerability(new Client(), new ApiEndpoint($slApiEndpoint));
        if ((!empty($excludePackages))) {
            $repository = new VulnerabilityFiltered(
                $repository,
                new VulnerabilityListFilterPackageExceptionList(
                    $excludePackages
                )
            );
        }

        return $repository;
    }
}