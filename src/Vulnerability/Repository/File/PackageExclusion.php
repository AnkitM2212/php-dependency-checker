<?php
/**
 * Copyright (c) 2017 Timo Ebel
 *
 * This work is licensed under the terms of the MIT license.
 * For a copy, see <https://opensource.org/licenses/MIT> or the LICENSE file included in this project.
 */

namespace Rekhyt\PhpDependencyChecker\Vulnerability\Repository\File;

use Rekhyt\PhpDependencyChecker\Vulnerability\Repository\Provider\PackageExclusion as PackageExclusionProvider;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\PackageName as PackageNameValueObject;

class PackageExclusion implements PackageExclusionProvider
{
    /** @var string */
    private $packageExclusionFilePath;

    /**
     * @param string $packageExclusionFilePath
     */
    public function __construct($packageExclusionFilePath)
    {
        $this->packageExclusionFilePath = $this->getFilePath($packageExclusionFilePath);
    }

    /** @inheritdoc */
    public function getPackageExclusions()
    {
        if (!file_exists($this->packageExclusionFilePath) || is_dir($this->packageExclusionFilePath)) {
            throw new FetchingPackageExclusionFailedFileNotFoundException(
                'Package exclusion file not found in path: ' . $this->packageExclusionFilePath
            );
        }

        $excludePackageNames = [];
        foreach (explode("\n", file_get_contents($this->packageExclusionFilePath)) as $rawPackageName) {
            $packageName = trim($rawPackageName);

            if (empty($packageName)) {
                continue;
            }

            $excludePackageNames[] = new PackageNameValueObject(trim($packageName));
        }

        return $excludePackageNames;
    }

    /**
     * @param string $originalFilePath
     *
     * @return string
     */
    private function getFilePath($originalFilePath)
    {
        return (0 === strpos($originalFilePath, '~') || 0 === strpos($originalFilePath, '/'))
            ? $originalFilePath
            : getcwd() . '/' . $originalFilePath;
    }
}