<?php
/**
 * Copyright (c) 2017 Timo Ebel
 *
 * This work is licensed under the terms of the MIT license.
 * For a copy, see <https://opensource.org/licenses/MIT> or the LICENSE file included in this project.
 */

namespace Rekhyt\PhpDependencyChecker\Vulnerability\Repository\File;

use Rekhyt\PhpDependencyChecker\Vulnerability\Repository\Provider\ComposerLockFileContent as ComposerLockFileContentProvider;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\ComposerLockFileContent as ComposerLockFileContentValueObject;

class ComposerLockFileContent implements ComposerLockFileContentProvider
{
    /** @var string */
    private $lockFilePath;

    /**
     * @param string $lockFilePath
     */
    public function __construct($lockFilePath)
    {
        $this->lockFilePath = $this->getFilePath($lockFilePath);
    }

    /** @inheritdoc */
    public function getContent()
    {
        if (!file_exists($this->lockFilePath) || is_dir($this->lockFilePath)) {
            throw new FetchingComposerLockFileContentFailedFileNotFoundException(
                'composer.lock not found in path: ' . $this->lockFilePath
            );
        }

        return new ComposerLockFileContentValueObject(file_get_contents($this->lockFilePath));
    }

    /**
     * @param string $originalFilePath
     *
     * @return string
     */
    private function getFilePath($originalFilePath)
    {
        return (0 === strpos($originalFilePath, '~') || 0 === strpos($originalFilePath, '/'))
            ? $originalFilePath
            : getcwd() . '/' . $originalFilePath;
    }
}